var bldg_model = require('./models/building');

//create mongodb connection
var mongoose = require("mongoose");
var mongoDB = 'mongodb://croncal:acciofountainaguamenti@ds237707.mlab.com:37707/terp-tap-finder';
mongoose.connect(mongoDB, {
  useMongoClient: true
});
mongoose.Promise = global.Promise;
var db = mongoose.connection;
mongoose.connection.on('error', console.error.bind(console, 'MongoDB connection error:'));

var request = require("request");

//populate database
function populate() {
    request("http://api.umd.io/v0/map/buildings", (error, response, body) =>{
      if(!error && response.statusCode ==200){
          var data = JSON.parse(body);
          //go throughd ata
          for(var i in data){
              //if building has a code associated with it
              if(data[i].code.length > 0){
                  var new_bldg = new bldg_model({
                        name: data[i].name,
                        blg_num: data[i].building_id,
                        code: data[i].code,
                        has_tap: false,
                        lng: data[i].lng,
                        lat: data[i].lat
                    });//end

                    new_bldg.save((error)=>{
                        if(error){ console.log(error); }
                        else{
                            console.log("building saved");
                            console.log(new_bldg.name);
                        }
                    });
              }//end if
          }//end for
      } else {
            console.log(response.statusCode);
            console.log("Error occured.");
            console.log(error);
      }
    });
}// end populate

function markBldgsWithTaps(){
    //list generated by python script
    //list of ids of buildings with taps
    var dict = {'252': ['Hallway 3136 (Room 3194)', 'Hallway 1194 (Room 1136)', 'Hallway 5195(Room 5114)'], '253': ['Hallway 3190 (Room 3113)', 'Hallway 5194 (Room 5131)'], '254': ['Hallway 1191 (Room 1113)', 'Hallway 1193 (Room 1131)'], '419': ['Hallway 0298 (Room 0201)', 'Hallway 1109 (Room 1118)'], '256': ['Hallway 0100 (Room 0101)', 'Hallway 3192 (Room 3111)', 'Hallway 5195(Room 5135)'], '258': ['Hallway 1192 (Room1113)'], '259': ['Hallway 0195 (Room 0102)', 'Hallway 1195 (Room 1115)', 'Hallway 1190(Room 1126)'], '099': ['Room 2196', 'Room 4198'], '097': ['Between Rooms 1105/1100A'], '096': ['Hallway 2198 (Room 2105)'], '121': ['Hallway 2198 (Room 2103)', 'Hallway 4198 (Room 4103)'], '122': ['Hallway 1193 (Room 1130)'], '250': ['Room 1198'], '060': ['Hallway 0195 (Bathroom 0110)'], '065': ['Hallway 1193 (Room 1119)'], '064': ['Hallway 0117 (across from Room 0117B)'], '061': ['Hallway 0190 (Room 0190)'], '063': ['Hallway 0197 (Room 0104)', 'Hallway 0194 (Room 0113)'], '062': ['Hallway 0194 (Room 0109)'], '069': ['Kitchen 0102'], '051': ['Hallway 1197 (Room 1117)'], '008': ['Lobby 1199'], '015': ['Room 0208'], '017': ['Hallway 1197 (Room 1113)'], '014': ['Room B0106'], '996': ['outh Campus Commons 1 - Building #996'], '997': ['outh Campus Commons 2 - Building #997'], '998': ['outh Campus Commons 3 - Building #998'], '999': ['outh Campus Commons 4 - Building #999'], '974': ['outh Campus Commons 5 - Building #974'], '975': ['outh Campus Commons 6 - Building #975'], '981': ['outh Campus Commons 7 - Building #981'], '142': ['Room 0422', 'Room 0494'], '145': ['Room 0204'], '078': ['Across from Room 0133', 'Room 1103'], '146': ['Room 1307'], '115': ['Room 1106', 'Room 1306'], '143': ['Room 1201'], '144': ['Room 1250'], '296': ['Room 1108'], '091': ['Room 2219'], '090': ['hemical/Nuclear Engineering Building - Building #090 Across from 2227'], '059': ['Room 1110'], '386': ['Room 2201'], '224': ['Between Rooms 1206/1298'], '406': ['Room 1436'], '084': ['Room 0498'], '089': ['Room 1198'], '237': ['Room 1125'], '073': ['Room 1218'], '147': ['Room 1106'], '034': ['Room 1205'], '083': ['Room 1112'], '048': ['Room 0111'], '225': ['Room 1101'], '417': ['Across from Room 1105'], '071': ['Between Rooms 1130/1124'], '038': ['Room 1109'], '046': ['Room 1102', 'Room 0103'], '088': ['Near Stairway 1198'], '035': ['Room 6127'], '231': ['Room 1120'], '036': ['Room 1111'], '082': ['Room 1110'], '415': ['Main Lobby'], '255': ['Room 0194'], '037': ['Room 1208'], '044': ['Room 0113'], '233': ['Room 1106'], '076': ['Room 0125'], '141': ['Room 1112'], '042': ['Room 0251', 'between Rooms 1101/1107'], '039': ['Room 1110', 'between Rooms 1194/1135'], '251': ['51 North Dining Hall - Building #251'], '338': ['Room 1109'], '162': ['Room 1117/1103 (concourse in southeast corner)'], '068': ['Room 1101 (Upper Weight Room)', 'Room B0170 (Maryland Adventure Program Lobby)', 'Room 2102'], '140': ['Main Lobby'], '201': ['Room 1299'], '077': ['Room 0113'], '052': ['Room 0117'], '004': ['Room 1196 (south side of lobby)', 'Room 0109'], '003': ['Room 0600T'], '163': ['Hallway next to Grand Ballroom'], '026': ['Near Contracts Office']};
    var hasTap = ['252', '253', '254', '419', '256', '258', '259', '099', '097', '096', '121', '122', '250', '060', '065', '064', '061', '063', '062', '069', '051', '008', '015', '017', '014', '996', '997', '998', '999', '974', '975', '981', '142', '145', '078', '146', '115', '143', '144', '296', '091', '091', '091', '090', '059', '386', '224', '406', '084', '089', '237', '073', '147', '147', '034', '083', '048', '225', '417', '071', '038', '046', '088', '084', '035', '035', '035', '231', '036', '082', '415', '078', '255', '037', '044', '233', '076', '141', '042', '039', '251', '338', '162', '068', '140', '201', '077', '052', '004', '003', '163', '026'];
    for(var idx in hasTap){
        console.log(dict[hasTap[idx]]);
        bldg_model.findOneAndUpdate({blg_num:hasTap[idx]}, {$set:{has_tap:true,
        tap_locs:dict[hasTap[idx]]}}, function(err, doc){
            if(err){
                console.log("Something wrong when updating data!");
            }
            console.log(doc);
    });
    }
}

/**
 * Given a building that has no tap, and list of bldgs with tap
 * iterate through bldgs with tap and return id of nearest bldg with tap
 * Using euclidean over haversine because distances are close
 * O(n)
 */
function calcNearest(building){
    // var aX = building.lat;
    // var aY = building.lng;
    bldg_model.find({has_tap: true}, function(err, doc) {
        if(!err){
            var taps = doc;
            var nearest = "";
            var nearestDist = 99999;
            for(var i in taps){
                var currDist = Math.sqrt(
                    Math.pow((taps[i].lng - building.lng),2) +
                    Math.pow((taps[i].lat - building.lat),2) );
                if(currDist < nearestDist){
                    nearest = taps[i].blg_num;
                    nearestDist = currDist;
                }
            }//end for
             bldg_model.findOneAndUpdate({blg_num:building.blg_num},
                {$set:{nearest:nearest}}, (err, doc) =>{
                    if(err){
                        console.log("Something went wrong with assigning building");
                    } else {
                        console.log("Assigning " + nearest + "to " + building.name);
                    }
                });
        } else {
            console.log("Something went wrong calculating error:");
            console.log(err);
        }
    });
}

/**
 * call calcNearest on all bldgs that have no tap
 * O(n^2),
 * Another solution: group buildings close enough first
 */
function assignNearest() {
    //get bldgs with no taps
    bldg_model.find({has_tap: false}, function(err, doc){
        if(!err){
            var no_taps = doc;
            for(var i in no_taps){
                var building = no_taps[i];
               calcNearest(building);
            }
        } else {
            console.log("Something went wrong assinging nearest");
            console.log(err);
        }
    });


}

assignNearest();
